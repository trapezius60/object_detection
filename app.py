import streamlit as st
from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image
import tempfile
from streamlit_webrtc import VideoTransformerBase, webrtc_streamer
import time

# ------------------- Page Config -------------------
st.set_page_config(page_title="Object Detection App", page_icon="üîé", layout="wide")

# ------------------- Header -------------------
st.markdown(
    """
    <h1 style='text-align: center;'>üîé Object Detection</h1>
    """,
    unsafe_allow_html=True
)
st.write("Upload an image or use your webcam for live detection")

# ------------------- Wound Descriptions -------------------
wound_descriptions = {
    "wound_hesitation": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏•‡∏±‡∏á‡πÄ‡∏• (Hesitation wound): ‡∏°‡∏±‡∏Å‡∏û‡∏ö‡πÉ‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥‡∏£‡πâ‡∏≤‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏•‡∏ï‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ú‡∏•‡∏Ç‡∏ô‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Å‡∏±‡∏ô ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÅ‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô",
    "wound_laceration": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏â‡∏µ‡∏Å‡∏Ç‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö (Laceration): ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏Ç‡πá‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏°‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö ‡∏°‡∏µ‡∏ñ‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ü‡∏Å‡∏ä‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏°‡∏µ tissue bridging/undermining",
    "wound_open_fracture": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏´‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î (open fracture): ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏ó‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏ñ‡∏ä‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ä‡∏ô‡πÑ‡∏î‡πâ (reconstruction)",
    "wound_burn": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡πÑ‡∏´‡∏°‡πâ (burn): ‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏°‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏• (pattern) ‡∏ß‡πà‡∏≤‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
    "wound_hanging": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏£‡∏±‡∏î‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏•‡∏≥‡∏Ñ‡∏≠ ‡πÅ‡∏Ç‡∏ß‡∏ô‡∏Ñ‡∏≠ (hanging): ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏£‡∏±‡∏î‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á hanging ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô",
    "wound_strangulation": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏£‡∏±‡∏î‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏•‡∏≥‡∏Ñ‡∏≠ ‡∏£‡∏±‡∏î‡∏Ñ‡∏≠ (strangulation): ‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏£‡∏±‡∏î‡πÅ‡∏ô‡∏ß‡∏Ç‡∏ß‡∏≤‡∏á ‡∏ã‡∏∂‡πà‡∏á‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏£‡∏±‡∏î‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Ü‡∏≤‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏≥‡∏û‡∏£‡∏≤‡∏á",
    "gsw_entrance": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏õ‡∏∑‡∏ô (gunshot wound entrance): ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏õ‡∏∑‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏Ñ‡∏∑‡∏≠ punch-out lesion ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ç‡∏°‡πà‡∏≤‡∏î‡∏¥‡∏ô‡∏õ‡∏∑‡∏ô‡∏î‡∏±‡∏á‡∏†‡∏≤‡∏û (soot/gun powder tatooing)",
    "gsw_exit": "‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏õ‡∏∑‡∏ô (gunshot wound exit): ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏õ‡∏∑‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏Ñ‡∏∑‡∏≠ punch-out lesion ‡πÇ‡∏î‡∏¢‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏≠‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏â‡∏Å‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏â‡∏µ‡∏Å‡∏Ç‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö"
    # ‚ûï Add more classes if your model has them
}

# ------------------- Load Model -------------------

MODEL_OPTIONS = {
    "General Object Detection (YOLOv8x-OIV7 ‚Äì 600 Objects)": "https://huggingface.co/trapezius60/yolov8x-oiv7/resolve/main/yolov8x-oiv7.pt",
    "Forensic Wound Detection (YOLOv8n)": "https://huggingface.co/trapezius60/forensic_wound_detection/resolve/main/best.pt"
}

# ------------------- Model Selector -------------------
selected_model = st.selectbox("Select Detection Model", list(MODEL_OPTIONS.keys()))

@st.cache_resource
def load_model(model_url):
    return YOLO(model_url)

model = load_model(MODEL_OPTIONS[selected_model])


# ------------------- Confidence Slider -------------------
conf_thresh = st.slider("Confidence threshold", 0.0, 1.0, 0.25, 0.05)

# ------------------- Image Upload -------------------
uploaded_file = st.file_uploader("üì∏ Upload an image", type=["jpg","png","jpeg"])

if uploaded_file:
    img = Image.open(uploaded_file).convert("RGB")
    img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)  # BGR for YOLO

    # Run detection
    results = model(img_cv, conf=conf_thresh)
    annotated_bgr = results[0].plot()  # YOLO returns BGR
    annotated_rgb = cv2.cvtColor(annotated_bgr, cv2.COLOR_BGR2RGB)  # convert to RGB for display

    # Display annotated image
    st.image(annotated_rgb, caption="Detection Result", use_container_width=True)
     # Extract detected wound types
    detected_classes = set()
    for r in results[0].boxes.cls.cpu().numpy():
        cls_name = results[0].names[int(r)]
        detected_classes.add(cls_name)

    # Show descriptions if available
    if detected_classes:
        st.subheader("üìù Detected Object Descriptions")
        desc_texts = []
        for cls in detected_classes:
            if cls in wound_descriptions:
                desc_texts.append(f"**{cls}**: {wound_descriptions[cls]}")
            else:
                desc_texts.append(f"**{cls}**: (No description available)")
        st.info("\n\n".join(desc_texts))
        
    # Save for download
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    cv2.imwrite(temp_file.name, annotated_bgr)  # save BGR

    st.download_button(
        "Download Annotated Image",
        data=open(temp_file.name, "rb").read(),
        file_name="detection.png"
    )

# ------------------- Webcam Live Detection -------------------
class VideoTransformer(VideoTransformerBase):
    def __init__(self):
        self.captured_frame = None  # store BGR frame for capture/download

    def transform(self, frame):
        img = frame.to_ndarray(format="bgr24")  # input BGR from webcam
        results = model(img, conf=conf_thresh)
        annotated = results[0].plot()  # BGR for WebRTC preview
        self.captured_frame = annotated  # store for capture/download
        return annotated  # BGR preview (WebRTC expects BGR)

# Initialize webcam
webrtc_ctx = webrtc_streamer(
    key="wound-detection",
    video_transformer_factory=VideoTransformer,
    media_stream_constraints={"video": {"facingMode": "environment"}, "audio": False},
    async_transform=True,
)

# ------------------- Capture Button -------------------
st.markdown("---")

if webrtc_ctx.video_transformer:
    if st.button("üì∏ Capture & Download Current Frame"):
        frame_bgr = webrtc_ctx.video_transformer.captured_frame
        if frame_bgr is not None:
            # Convert BGR -> RGB -> BGR for saving (ensures correct color)
            frame_rgb = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2RGB)
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
            cv2.imwrite(temp_file.name, cv2.cvtColor(frame_rgb, cv2.COLOR_RGB2BGR))  # save correctly

            st.download_button(
                "Download Captured Image",
                data=open(temp_file.name, "rb").read(),
                file_name="capture.png"
            )
        else:
            st.warning("No frame captured yet! Please wait for the webcam to initialize.")

# ------------------- Footer -------------------
st.markdown("---")
st.markdown(
    f"""
    <div style='text-align:center; font-size:14px; color:gray;'>
        Object Detection Version: 1.1.0 | ¬© 2025 BH <br>
        <div>
            <a href="https://docs.google.com/document/d/18KlYv7Xbp3Y4Snatfez_jff0OW7DWKPoYP3HA3fx2cQ/edit?usp=sharing" target="_blank">üìÑ User Manual</a> | 
            <a href="https://forms.gle/WgGnkcUQPafyhmng8" target="_blank">üëç Feedback Please</a>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)
